#- atcoder
atcoder_init_problem() {
  if [ ! -e "./main.rs" ]; then
    cp -i $(ghq root)/github.com/arizuk/programming-contest-solutions/templates/main.rs .
  fi

  if [ $# -gt 0 ]; then
    atcoder download_testcases $@
  elif [ -e "p" ]; then
    atcoder download_testcases p
  else
    clippaste > p
    atcoder download_testcases p
  fi

  if [[ $? == 0 ]]; then
    code main.rs
  fi
}

_atcoder_compile_source() {
  # Determin solver language and compile source
  solver_source=${1:=main.rs}

  local extension="${solver_source##*.}"
  local prog

  if [ "${solver_source}" = "${extension}" ]; then
    extension=""
  fi

  case ${extension} in
    "rs")
      local compile_command="rustc ${solver_source} -o main"
      echo "AT> Compiler: ${compile_command} ($(rustc --version))"
      eval $compile_command
      if [ $? -gt 0 ]; then return 1; fi
      solver="./main"
      ;;
    "cpp")
      local compile_command="g++ -std=c++14 ${solver_source}"
      echo "AT> Compiler: ${compile_command}"
      eval $compile_command
      if [ $? -gt 0 ]; then return 1; fi
      solver="./a.out"
      ;;
    "rb")
      solver="ruby ${solver_source}"
      ;;
    "bash")
      solver="bash ${solver_source}"
      ;;
    * )
      prog=$@
      solver_source="${prog}"
      solver="${prog}"
      return 0
  esac

  cat ${solver_source}|pbcopy
}

_atcoder_run_testcases() {
  solver=$1

  local output expected ok faield ret

  ok=0
  failed=0

  for i in `ls input*`; do
    output=$(cat ${i}|eval ${solver})
    if [ $? -gt 0 ]; then; return 1; fi

    expected=$(cat ${i/input/output})
    if [ "$output" != "$expected" ]; then
      ret="... \e[31mFailed\e[m"
      let failed++
    else
      ret="... \e[32mOk\e[m"
      let ok++
    fi

    echo -e ---------- Case: ${i} ${ret}
    echo $output

    if [ "$output" != "$expected" ]; then
      echo ---------- Expected
      echo $expected
    fi
  done

  echo ok: ${ok}, failed: ${failed}
}

atcoder_test() {

  local solver solver_source
  _atcoder_compile_source $@

  if [ $? -gt 0 ]; then;
    echo "AT> Abort due to compile error" 2>&1
    return 1
  fi

  echo "AT> Source: ${solver_source}"
  echo "AT> Run: ${solver}"
  echo

  _atcoder_run_testcases "${solver}"
}

alias ai="atcoder_init_problem"
alias at="atcoder_test"

rr() {
  main=${1:=main.rs}
  rustc ${main} -o out
  if [ $? -gt 0 ]; then return 1; fi
  ./out
}

cppr() {
  main=${1:=main.cpp}
  g++ -std=c++14 ${main}
  if [ $? -gt 0 ]; then return 1; fi
  ./a.out
}

rrr() {
  main=${1:=main.rs}
  rustc ${main} -o out -C debug-assertions=no
  if [ $? -gt 0 ]; then return 1; fi
  ./out
}

rrd() {
  main=${1:=main.rs}
  rustc ${main} -o debug
  if [ $? -gt 0 ]; then return 1; fi
  rust-lldb ./debug
}

rustrun() {
  rustc $@ -o out
  if [ $? -gt 0 ]; then return 1; fi
  ./out
}
