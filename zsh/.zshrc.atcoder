#- atcoder
atcoder_init_problem() {
  if [ ! -e "./main.rs" ]; then
    cp -i /home/arizuka/ghq/github.com/arizuk/programming-contest-solutions/templates/main.rs .
  fi

  if [ $# -gt 0 ]; then
    atcoder download_testcases $@
  elif [ -e "p" ]; then
    atcoder download_testcases p
  else
    clippaste > p
    atcoder download_testcases p
  fi

  if [[ $? == 0 ]]; then
    code main.rs
  fi
}

atcoder_test() {
  # Determin main program
  lang=${1:=rust}

  # compile source
  case ${lang} in
    "rust")
      prog=${2:=main.rs}
      rustc ${prog} -o main
      if [ $? -gt 0 ]; then return 1; fi

      cat ${prog}|pbcopy
      echo "> Run ${prog}"
      runner="./main"
      ;;
    "cpp")
      g++ -std=c++14 main.cpp
      if [ $? -gt 0 ]; then return 1; fi
      cat main.cpp|pbcopy
      echo "> Run main.cpp"
      runner="./a.out"
      ;;
    "rb")
      cat main.rb|pbcopy
      echo "> Run ruby main.rb"
      runner="ruby main.rb"
      ;;
    "bin")
      prog=${2}
      echo "> Run ${prog}"
      runner="${prog}"
      ;;
  esac

  # Run testcases
  ok=0
  failed=0

  for i in `ls input*`; do
    output=$(cat ${i}|eval $runner)
    expected=$(cat ${i/input/output})

    if [ "$output" != "$expected" ]; then
      ret="... \e[31mFailed\e[m"
      let failed++
    else
      ret="... \e[32mOk\e[m"
      let ok++
    fi

    echo -e ---------- Case: ${i} ${ret}
    echo $output

    if [ "$output" != "$expected" ]; then
      echo ---------- Expected
      echo $expected
    fi
  done

  echo
  echo ok: ${ok}, failed: ${failed}
}

alias ai="atcoder_init_problem"
alias at="atcoder_test"

rr() {
  main=${1:=main.rs}
  rustc ${main} -o out
  if [ $? -gt 0 ]; then return 1; fi
  ./out
}

cppr() {
  main=${1:=main.cpp}
  g++ -std=c++14 ${main}
  if [ $? -gt 0 ]; then return 1; fi
  ./a.out
}

rrr() {
  main=${1:=main.rs}
  rustc ${main} -o out -C debug-assertions=no
  if [ $? -gt 0 ]; then return 1; fi
  ./out
}

rrd() {
  main=${1:=main.rs}
  rustc ${main} -o debug
  if [ $? -gt 0 ]; then return 1; fi
  rust-lldb ./debug
}

rustrun() {
  rustc $@ -o out
  if [ $? -gt 0 ]; then return 1; fi
  ./out
}